// <auto-generated />
using System;
using APIResevaDeLaboratorio.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIResevaDeLaboratorio.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727224332_PopularReserva")]
    partial class PopularReserva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("APIResevaDeLaboratorio.Models.ProfessorTurma", b =>
                {
                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("ProfessorId", "TurmaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("ProfessoresTurmas");
                });

            modelBuilder.Entity("Laboratorio", b =>
                {
                    b.Property<int>("LaboratorioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LaboratorioId"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LaboratorioId");

                    b.ToTable("Laboratorios");
                });

            modelBuilder.Entity("LaboratorioProfessor", b =>
                {
                    b.Property<int>("LaboratoriosLaboratorioId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessoresProfessorId")
                        .HasColumnType("int");

                    b.HasKey("LaboratoriosLaboratorioId", "ProfessoresProfessorId");

                    b.HasIndex("ProfessoresProfessorId");

                    b.ToTable("LaboratorioProfessor");
                });

            modelBuilder.Entity("LaboratorioTurma", b =>
                {
                    b.Property<int>("LaboratoriosLaboratorioId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasTurmaId")
                        .HasColumnType("int");

                    b.HasKey("LaboratoriosLaboratorioId", "TurmasTurmaId");

                    b.HasIndex("TurmasTurmaId");

                    b.ToTable("LaboratorioTurma");
                });

            modelBuilder.Entity("ProfessorTurma", b =>
                {
                    b.Property<int>("ProfessoresProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasTurmaId")
                        .HasColumnType("int");

                    b.HasKey("ProfessoresProfessorId", "TurmasTurmaId");

                    b.HasIndex("TurmasTurmaId");

                    b.ToTable("ProfessorTurma");
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReservaId"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DuracaoEmMinutos")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time(6)");

                    b.Property<int>("LaboratorioId")
                        .HasColumnType("int");

                    b.Property<int?>("LaboratorioId1")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessorId1")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int?>("TurmaId1")
                        .HasColumnType("int");

                    b.HasKey("ReservaId");

                    b.HasIndex("LaboratorioId");

                    b.HasIndex("LaboratorioId1");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ProfessorId1");

                    b.HasIndex("TurmaId");

                    b.HasIndex("TurmaId1");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("ReservaDeLaboratorioContext.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProfessorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProfessorId");

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("ReservaDeLaboratorioContext.Models.Turma", b =>
                {
                    b.Property<int>("TurmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TurmaId"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuantidadeAlunos")
                        .HasColumnType("int");

                    b.HasKey("TurmaId");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("APIResevaDeLaboratorio.Models.ProfessorTurma", b =>
                {
                    b.HasOne("ReservaDeLaboratorioContext.Models.Professor", "Professor")
                        .WithMany("ProfessoresTurmas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Turma", "Turma")
                        .WithMany("ProfessoresTurmas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("LaboratorioProfessor", b =>
                {
                    b.HasOne("Laboratorio", null)
                        .WithMany()
                        .HasForeignKey("LaboratoriosLaboratorioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaboratorioTurma", b =>
                {
                    b.HasOne("Laboratorio", null)
                        .WithMany()
                        .HasForeignKey("LaboratoriosLaboratorioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Turma", null)
                        .WithMany()
                        .HasForeignKey("TurmasTurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessorTurma", b =>
                {
                    b.HasOne("ReservaDeLaboratorioContext.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessoresProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Turma", null)
                        .WithMany()
                        .HasForeignKey("TurmasTurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reserva", b =>
                {
                    b.HasOne("Laboratorio", "Laboratorio")
                        .WithMany()
                        .HasForeignKey("LaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Laboratorio", null)
                        .WithMany("Reservas")
                        .HasForeignKey("LaboratorioId1");

                    b.HasOne("ReservaDeLaboratorioContext.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Professor", null)
                        .WithMany("Reservas")
                        .HasForeignKey("ProfessorId1");

                    b.HasOne("ReservaDeLaboratorioContext.Models.Turma", "Turma")
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservaDeLaboratorioContext.Models.Turma", null)
                        .WithMany("Reservas")
                        .HasForeignKey("TurmaId1");

                    b.Navigation("Laboratorio");

                    b.Navigation("Professor");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("Laboratorio", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ReservaDeLaboratorioContext.Models.Professor", b =>
                {
                    b.Navigation("ProfessoresTurmas");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ReservaDeLaboratorioContext.Models.Turma", b =>
                {
                    b.Navigation("ProfessoresTurmas");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
